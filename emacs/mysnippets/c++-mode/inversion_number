# -*- mode: snippet -*-
# name: inversion_number
# key: inversion_number
# --
// Argument: A: 0-indexed, combination of {0, 1, 2, ..., N - 1} (Duplicated OK)
// Return value: Inversion number of A
// Use long long bit, because N=10^5 requires long long bit
// O(N log N)
template<class T> long long inversion_number_compressed(vector<T> A) {
  int N = A.size();
  binary_indexed_tree<long long> bit(N);
  long long ans = 0;
  for (int j = 0; j < N; j++) {
    ans += bit.sum(A[j] + 1, N);
    bit.add(A[j], 1);
  }
  return ans;
}

// Compress A.
// Argument: A (input, output) 0-indexed array.
// O(N log N)
template<class T> void compress(vector<T>& A) {
  map<T, int> mp;
  for (size_t i = 0; i < A.size(); i++) {
    mp[A[i]]++;
  }
  int count = 0;
  for (typename map<T, int>::iterator it = mp.begin(); it != mp.end(); it++) {
    it->second = count++;
  }
  for (size_t i = 0; i < A.size(); i++) {
    A[i] = mp[A[i]];
  }
}

// Argument: A: 0-indexed array. A might not be a permutation of {0, 1, 2, ..., N - 1}
// Return value: Inversion number of array A
// O(N log N)
template<class T> long long inversion_number(vector<T> A) {
  vector<T> B(A);
  compress(B);
  return inversion_number_compressed(B);
}
